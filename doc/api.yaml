openapi: 3.0.3

info:
  title: WASAPhoto API
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to 
    WASAPhoto! You can upload your photos directly from your PC, and they will be 
    to everyone following you.
  version: 1.0.0

tags:
  - name: "Login"
    description: User authentication for accessing the platform.
  - name: "User"
    description: Everything about users.
  - name: "Photos"
    description: Everything about photos.
    
#-------------------------------------------------------------------------------
  
components:

  securitySchemes:
    # Bearer authentication using the user identifier instead of the token
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer token containing the userID.
    
  schemas:
  
    userid:
      description: user ID
      type: integer
      example: 1234
    #___________________________________________________________________________
    
    username:
      description: username
      type: string
      example: Maria
      pattern: '^[a-zA-Z0-9]+$'
      minLength: 3
      maxLength: 16
    #___________________________________________________________________________
    
    photoid:
      type: integer
      description: ID of the photo.
      example: 1234
    #___________________________________________________________________________
    
    likeid:
      description: like ID
      type: integer
      example: 1234
    #___________________________________________________________________________
    
    commentid:
      description: comment ID
      type: integer
      example: 1234
    #___________________________________________________________________________
    
    imagedata:
      type: string
      format: byte
      description: represents the image.
      minLength: 1
      maxLength: 5000
    #___________________________________________________________________________
    
    photo:
      description: |- 
        Photo object that includes the author's name, the image URL, the number of
        likes and comments, and details about users who liked or commented, including
        the comments themselves.
      type: object
      properties:
      
        author:
          $ref: '#/components/schemas/username'
        
        photoid:
          $ref: '#/components/schemas/photoid'
          
        imagedata:
          $ref: '#/components/schemas/imagedata'
      
        uploadDate:
          type: string
          description: The date and time when the upload occurred.
          format: date-time
          example: 2023-11-09T15:30:00Z
          minLength: 1
          maxLength: 35
          
        likesCount:
          type: integer
          description: number of likes
          example: 12
            
        commentsCount:
          type: integer
          description: number of comments
          example: 3
          
        comments:
          type: array
          description: |-
            Contains the user IDs of all users who have commented along with their
            respective comments.
          minItems: 0
          maxItems: 5000
          items:
            type: object
            properties:
              userid:
                $ref: '#/components/schemas/userid'
              commentid:
                $ref: '#/components/schemas/commentid'
              comment:
                type: string
                description: Comment on a photo
                pattern: '^.*$'
                minLength: 1
                maxLength: 5000
                example: Beautiful photo!
    #___________________________________________________________________________
      
  responses:
  
    UnauthorizedError:
      description: user ID is missing or invalid
      content:
        application/json:
          schema:
            description: Contains an error message
            type: object
            properties:
              message:
                description: error message
                type: string
                example: Invalid user ID supplied

    #___________________________________________________________________________
    
    BadRequest: 
      description: Invalid request
      content:
        application/json:
          schema:
            description: Contains an error message
            type: object
            properties:
              message:
                description: error message
                type: string
                example: Invalid request
    #___________________________________________________________________________
    
    NotFoundError:
      description: Element not found
      content:
        application/json:
          schema: 
            description: Contains an error message
            type: object
            properties:
              message:
                description: error message
                type: string
                example: Element not found
          
#-------------------------------------------------------------------------------
    
security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
         application/json:
          schema:
            description: Contains the username
            type: object
            properties:
              name:
                $ref: '#/components/schemas/username'
        required: true
        
      responses:
        '201':
          description: User log-in action successful
          content:
           application/json:
             schema:
                $ref: '#/components/schemas/userid'
                    
        
        '400':
          $ref: '#/components/responses/BadRequest'
  
  /users/{userid}:
    parameters:
      - name: userid
        in: path
        required: true
        description: ID of the user
        schema:
          $ref: '#/components/schemas/userid'
          
    put:
      tags: ["User"]
      summary: Sets the username
      description: The user can change their username.
      operationId: setMyUserName
      requestBody:
        description: User's username
        required: true
        content:
          application/json:
            schema:
              description: Contains the username
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/username'
                  
      responses:
        '200':
          description: Username changed successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
        
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'

    get:
      tags: ["User"]
      summary: View the profile of an user
      description: |-
        The user's personal profile page displays their photos and the number of
        followers, following and uploaded photos. A user can search other user
        profiles via username.
      operationId: getUserProfile
      
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                description: returns the array containing all the photos and details
                type: object
                properties:
                  photos:
                    type: array
                    description: Contains all the photos and details
                    minItems: 0
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/photo'
                      
                  
            application/json:
              schema:
                description: |-
                  Contains the number of photos posted, followers and
                  following
                type: object
                properties:
                  photosCount:
                    type: integer
                    description: Number of photos posted by the user
                  followersCount:
                    type: integer
                    description: Number of followers
                  followingCount:
                    type: integer
                    description: Number of users being followed
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /users:
    get:
      tags: ["User"]
      summary: Retrieves a list of users
      description: |-
        Users can be searched by their username using the search bar, which
        returns a series of users matching the search criteria.
      operationId: getUsers
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: returns the array containing the users searched
                type: object
                properties:
                  users:
                    type: array
                    description: Contains the users searched
                    minItems: 0
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/username'
                  
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  
  /users/{userid}/photos:
    post:
      tags: ["Photos"]
      summary: Uploads a photo
      description: |- 
        The user can post a new photo on their profile. Photos will be presented in
        reverse chronological order.
      operationId: uploadPhoto
      requestBody:
        description: URL of the photo that the user wants to upload.
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/imagedata'
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
      
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photo'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userid}/following:
    post:
      tags: ["User"]
      summary: Adds a user to the following list of the specified user
      description: Users can follow others to view and interact with their photos.
      operationId: followUser
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
      requestBody:
        description: ID of the user you want to follow.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
            
                    
      responses:
        '201':
          description: User followed successfully
          content:
            application/json:
              schema:
                description: Contains a success message
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
                  
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userid}/following/{followingid}:
    delete:
      tags: ["User"]
      summary: Removes a user from the following list of the specified user
      description: |-
        Users can unfollow someone they were previously following to stop seeing
        their photos.
      operationId: unfollowUser
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: followingid
          in: path
          required: true
          description: ID of the user you want to unfollow.
          schema:
            $ref: '#/components/schemas/userid'
        
        
                    
      responses:
        '201':
          description: User unfollowed successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userid}/banned-users:
    post:
      tags: ["User"]
      summary: Adds a user to the list of users banned by the specified user
      description: |-
        Users can block other one to prevent them from seeing any information
        about them.
      operationId: banUser
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
      requestBody:
        description: ID of the user you want to ban.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
                    
      responses:
        '201':
          description: User banned successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userid}/banned-users/{banneduserid}:
    parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: banneduserid
          in: path
          required: true
          description: User ID.
          schema:
            $ref: '#/components/schemas/userid'
            
    delete:
      tags: ["User"]
      summary: Removes a user from the list of users banned by the specified user
      description: Unblocking a user allows them to view your profile information.
      operationId: unbanUser
                  
      responses:
        '201':
          description: User unbanned successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
          
    get:
      tags: ["User"]
      summary: Returns the ban status of the specified user
      description: |-
        Returns true if banneduserid is banned by userid, false otherwise.
      operationId: getBanStatus
      
      responses:
        '200':
          description: Boolean representing if the user is banned or not.
          content: 
            application/json:
              schema:
                description: Ban status
                type: boolean
                example: true
        
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          

  /users/{userid}/stream:
    get:
      tags: ["User"]
      summary: View the user's stream
      description: |-
        The stream is composed by photos from “following” in reverse chronological
        order.
      operationId: getMyStream
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                description: returns the array containing all the photos and details
                type: object
                properties:
                  photos:
                    type: array
                    description: Contains all the photos and details
                    minItems: 0
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/photo'
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userid}/photos/{photoid}/likes:
    post:
      tags: ["Photos"]
      summary: Adds a like to the specified photo
      description: Users can put likes to all the photos they want
      operationId: likePhoto
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: photoid
          in: path
          required: true
          description: ID of the photo you want to like.
          schema:
            $ref: '#/components/schemas/photoid'
                    
      responses:
        '201':
          description: Photo liked successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /users/{userid}/photos/{photoid}/likes/{likeid}:
    delete:
      tags: ["Photos"]
      summary: Removes a specific like from the specified photo
      description: Users can remove likes to photos
      operationId: unlikePhoto
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: photoid
          in: path
          required: true
          description: ID of the photo you want to unlike.
          schema:
            $ref: '#/components/schemas/photoid'
        - name: likeid
          in: path
          required: true
          description: ID of the like you want to remove.
          schema:
            $ref: '#/components/schemas/likeid'
                    
      responses:
        '201':
          description: Photo unliked successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userid}/photos/{photoid}/comments:
    post:
      tags: ["Photos"]
      summary: Adds a comment to the specified photo
      description: Users can comment photos published by them and by others
      operationId: commentPhoto
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: photoid
          in: path
          required: true
          description: ID of the photo you want to comment.
          schema:
            $ref: '#/components/schemas/photoid'
      requestBody:
        description: Your comment.
        required: true
        content:
          application/json:
            schema:
              description: Contains the comment
              type: object
              properties:
                comment:
                  description: comment string
                  type: string
                  pattern: '^.*$'
                  minLength: 3
                  maxLength: 16
                  example: Beautiful Photo!
                    
      responses:
        '201':
          description: Photo commented successfully
          content: 
            application/json:
              schema:
                description: Contains the user and their comment with its ID
                type: object
                properties:
                  authorid: 
                    $ref: '#/components/schemas/userid'
                  commentid:
                    $ref: '#/components/schemas/commentid'
                  comment:
                    description: comment string
                    type: string
                    pattern: '^.*$'
                    minLength: 3
                    maxLength: 16
                    example: Beautiful Photo!
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userid}/photos/{photoid}/comments/{commentid}:
    delete:
      tags: ["Photos"]
      summary: Removes a specific comment from the specified photo
      description: |-
        Removes the comment with the specified ID under the specified photo. Only authors can remove their comment.
      operationId: uncommentPhoto
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: photoid
          in: path
          required: true
          description: ID of the photo where the comment to be removed is located.
          schema:
            $ref: '#/components/schemas/photoid'
        - name: commentid
          in: path
          required: true
          description: ID of the comment you want to remove
          schema:
            $ref: '#/components/schemas/commentid'
            
      responses:
        '200':
          description: Comment deleted successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /users/{userid}/photos/{photoid}:
    delete:
      tags: ["Photos"]
      summary: Deletes a photo
      description: |-
        Removes the specified photo. This operation will also remove all associated 
        likes and comments.
      operationId: deletePhoto
      parameters:
        - name: userid
          in: path
          required: true
          description: ID of the user.
          schema:
            $ref: '#/components/schemas/userid'
        - name: photoid
          in: path
          required: true
          description: ID of the photo you want to remove.
          schema:
            $ref: '#/components/schemas/photoid'
      
      responses:
        '200':
          description: Photo deleted successfully
          content: 
            application/json:
              schema:
                description: Contains a success message
                type: object
                properties:
                  message:
                    description: OK message
                    type: string
                    example: OK
          
        '400':
          $ref: '#/components/responses/BadRequest'
          
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
          
        '404':
          $ref: '#/components/responses/NotFoundError'
      